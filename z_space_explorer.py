import sys
sys.path.append('../')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.manifold import TSNE, MDS
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
from sklearn.neighbors import NeighborhoodComponentsAnalysis as NCA

blue = (3/255, 80/255, 160/255, 1)
orange = (252 / 255, 152 / 255, 3 / 255, 1)
green = (21 / 255, 158 / 255, 14 / 255, 1)

class ZSpaceExplorer:

    def __init__(self):
        pass

    def load_zs_df(self):
        zs_df_path = 'data/training_data/V1_center_with_zs.h5'
        self.zs_df = pd.read_hdf(zs_df_path,key='df')
        zs_columns = [f'z_{num}' for num in range(5)]
        wl_columns = [f'wl_{num}' for num in range(300)]
        label_columns = ['is_afib','is_normal','is_other']
        self.real_zs = self.zs_df[zs_columns].values.copy(order='C')
        self.real_wl = self.zs_df[wl_columns].values.copy(order='C')
        self.real_label = self.zs_df[label_columns].values.copy(order='C')
        return self


    def create_and_save_tsne_data(self):

        y = self.zs_df.loc[:,['is_afib','is_normal','is_other']]
        y = y.iloc[:,1]*1+y.iloc[:,2]*2
        y = y.rename_axis('y')
        X_cols = [f'z_{num}' for num in range(5)]
        X = self.zs_df.loc[:,X_cols]

        model = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=500,init='pca')
        X2 = pd.DataFrame(model.fit_transform(X))
        low_dim_df = pd.concat([y,X2],axis=1,ignore_index=True)
        low_dim_df.columns = ['y', '1', '2']
        low_dim_df.to_hdf('data/tsne_data.h5', key='df')


    def create_and_save_mds_data(self):

        y = self.zs_df.loc[:,['is_afib','is_normal','is_other']]
        y = y.iloc[:,1]*1+y.iloc[:,2]*2
        y = y.rename_axis('y')
        X_cols = [f'z_{num}' for num in range(5)]
        X = self.zs_df.loc[:,X_cols]

        model = MDS(n_components=2, max_iter=250, verbose=1)
        X2 = pd.DataFrame(model.fit_transform(X))
        low_dim_df = pd.concat([y,X2],axis=1,ignore_index=True)
        low_dim_df.columns = ['y', '1', '2']
        low_dim_df.to_hdf('data/lda_data.h5', key='df')


    def create_and_save_pca_data(self):
        y = self.zs_df.loc[:,['is_afib','is_normal','is_other']]
        y = y.iloc[:,1]*1+y.iloc[:,2]*2
        y = y.rename_axis('y')
        X_cols = [f'z_{num}' for num in range(5)]
        X = self.zs_df.loc[:,X_cols]

        model = PCA(n_components=2)
        X2 = pd.DataFrame(model.fit_transform(X,y))
        low_dim_df = pd.concat([y,X2],axis=1,ignore_index=True)
        low_dim_df.columns = ['y', '1', '2']
        low_dim_df.to_hdf('data/pca_data.h5', key='df')

    def load_and_plot_tsne(self):
        low_dim_df = pd.read_hdf('data/tsne_data.h5', key='df')
        fig, ax = plt.subplots(dpi=120,figsize = (10,10))

        low_dim_df[low_dim_df.y == 1].plot(kind='scatter', x='1', y='2', c=green, ax=ax, alpha=0.3, marker='.', label='noraml')
        low_dim_df[low_dim_df.y==0].plot(kind='scatter', x='1', y='2', c=blue,ax=ax,alpha=0.3,marker ='.',label='afib')
        low_dim_df[low_dim_df.y == 2].plot(kind='scatter', x='1', y='2', c=orange, ax=ax, alpha=0.3, marker='.',label='other')

        ax.legend()
        ax.set_title('2D tSNE projection of 5D z-space generated by VAE_dense3 for centered ecg beats')
        plt.savefig('figures/tSNE_projection.png')
        plt.show()

    def load_and_plot_lda(self):
        low_dim_df = pd.read_hdf('data/pca_data.h5', key='df')
        fig, ax = plt.subplots(dpi=120,figsize = (10,10))

        low_dim_df[low_dim_df.y == 1].plot(kind='scatter', x='1', y='2', c=green, ax=ax, alpha=0.3, marker='.', label='noraml')
        low_dim_df[low_dim_df.y==0].plot(kind='scatter', x='1', y='2', c=blue,ax=ax,alpha=0.3,marker ='.',label='afib')
        low_dim_df[low_dim_df.y == 2].plot(kind='scatter', x='1', y='2', c=orange, ax=ax, alpha=0.3, marker='.',label='other')

        ax.legend()
        ax.set_title('2D PCA projection of 5D z-space generated by VAE_dense3 for centered ecg beats')
        plt.savefig('figures/PCA_projection.png')
        plt.show()



if __name__=='__main__':
    ZSpaceExplorer().load_zs_df().create_and_save_mds_data()